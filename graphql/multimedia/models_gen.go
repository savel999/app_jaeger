// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package multimedia

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ArchiveMediaItemsResult interface {
	IsArchiveMediaItemsResult()
}

type ArchiverTasksListResult interface {
	IsArchiverTasksListResult()
}

type CompaniesListResult interface {
	IsCompaniesListResult()
}

type CropOfResult interface {
	IsCropOfResult()
}

type DeleteTagResult interface {
	IsDeleteTagResult()
}

// Download result: url or ProblemInterface
type DownloadFromPhotostockResult interface {
	IsDownloadFromPhotostockResult()
}

type DownloadGettyImageResult interface {
	IsDownloadGettyImageResult()
}

type EncoderTaskMediaResult interface {
	IsEncoderTaskMediaResult()
}

type EncoderTasksListResult interface {
	IsEncoderTasksListResult()
}

type EnrichMediaItemResult interface {
	IsEnrichMediaItemResult()
}

type EnsureTagResult interface {
	IsEnsureTagResult()
}

type GettyImagesListResult interface {
	IsGettyImagesListResult()
}

type GettyUserDownloadStatResult interface {
	IsGettyUserDownloadStatResult()
}

type LocationsListResult interface {
	IsLocationsListResult()
}

type MediaItem interface {
	IsMediaItem()
}

type MediaItemsListResult interface {
	IsMediaItemsListResult()
}

type PhotostockItem interface {
	IsPhotostockItem()
}

type ProblemInterface interface {
	IsProblemInterface()
}

// Search result: photostock items list or ProblemInterface
type SearchInPhotostockResult interface {
	IsSearchInPhotostockResult()
}

type TagWithMediaItemsCountsListResult interface {
	IsTagWithMediaItemsCountsListResult()
}

type TagsListResult interface {
	IsTagsListResult()
}

type UpdateMediaLinksResult interface {
	IsUpdateMediaLinksResult()
}

type UpdateTagResult interface {
	IsUpdateTagResult()
}

type UploadResult interface {
	IsUploadResult()
}

type UploadedMediaItem interface {
	IsUploadedMediaItem()
}

type AccessDeniedError struct {
	Message string `json:"message"`
}

func (AccessDeniedError) IsCompaniesListResult()               {}
func (AccessDeniedError) IsDownloadFromPhotostockResult()      {}
func (AccessDeniedError) IsUpdateTagResult()                   {}
func (AccessDeniedError) IsSearchInPhotostockResult()          {}
func (AccessDeniedError) IsGettyUserDownloadStatResult()       {}
func (AccessDeniedError) IsTagWithMediaItemsCountsListResult() {}
func (AccessDeniedError) IsEnrichMediaItemResult()             {}
func (AccessDeniedError) IsArchiveMediaItemsResult()           {}
func (AccessDeniedError) IsMediaItemsListResult()              {}
func (AccessDeniedError) IsDownloadGettyImageResult()          {}
func (AccessDeniedError) IsUpdateMediaLinksResult()            {}
func (AccessDeniedError) IsDeleteTagResult()                   {}
func (AccessDeniedError) IsProblemInterface()                  {}
func (AccessDeniedError) IsUploadResult()                      {}
func (AccessDeniedError) IsEnsureTagResult()                   {}

type AgeRestrictionOverlay struct {
	Age AgeRestriction `json:"age"`
}

type AgeRestrictionOverlayInput struct {
	Age AgeRestriction `json:"age"`
}

type ArchiveMediaItemsInput struct {
	UrlsAnyOf []string `json:"urlsAnyOf,omitempty"`
}

type ArchiverTask struct {
	ID          int                `json:"id"`
	Status      ArchiverTaskStatus `json:"status"`
	Progress    int                `json:"progress"`
	FailReason  string             `json:"failReason"`
	DocumentURL string             `json:"documentUrl"`
}

func (ArchiverTask) IsArchiveMediaItemsResult() {}

type ArchiverTasksFilterInput struct {
	IdsAnyOf      []int                `json:"idsAnyOf,omitempty"`
	StatusesAnyOf []ArchiverTaskStatus `json:"statusesAnyOf,omitempty"`
}

type ArchiverTasksPagination struct {
	Count      int             `json:"count"`
	Items      []*ArchiverTask `json:"items,omitempty"`
	TotalCount int             `json:"totalCount"`
}

func (ArchiverTasksPagination) IsArchiverTasksListResult() {}

type Audio struct {
	ID                   int                 `json:"id"`
	MimeType             string              `json:"mimeType"`
	Description          string              `json:"description"`
	Duration             float64             `json:"duration"`
	Origin               string              `json:"origin"`
	OriginalFileName     string              `json:"originalFileName"`
	OriginalFileMimeType string              `json:"originalFileMimeType"`
	URL                  string              `json:"url"`
	Tags                 TagsListResult      `json:"tags,omitempty"`
	Year                 int                 `json:"year"`
	Licensee             CompaniesListResult `json:"licensee,omitempty"`
}

func (Audio) IsEnrichMediaItemResult()  {}
func (Audio) IsMediaItem()              {}
func (Audio) IsEncoderTaskMediaResult() {}

type Box struct {
	Left   float64 `json:"left"`
	Top    float64 `json:"top"`
	Width  float64 `json:"width"`
	Height float64 `json:"height"`
}

type BoxInput struct {
	Left   float64 `json:"left"`
	Top    float64 `json:"top"`
	Width  float64 `json:"width"`
	Height float64 `json:"height"`
}

type CompaniesFilterInput struct {
	ForCurrentUser bool `json:"forCurrentUser"`
}

type CompaniesPagination struct {
	Count      int        `json:"count"`
	Items      []*Company `json:"items,omitempty"`
	TotalCount int        `json:"totalCount"`
}

func (CompaniesPagination) IsCompaniesListResult() {}

type Company struct {
	ID          int       `json:"id"`
	ParentID    *int      `json:"parentId,omitempty"`
	Key         string    `json:"key"`
	DisplayName string    `json:"displayName"`
	IsActive    bool      `json:"isActive"`
	CreatedAt   time.Time `json:"createdAt"`
	ModifiedAt  time.Time `json:"modifiedAt"`
}

type CropData struct {
	Crop    *Box     `json:"crop,omitempty"`
	Canvas  *Box     `json:"canvas,omitempty"`
	Rotate  int      `json:"rotate"`
	Overlay *Overlay `json:"overlay,omitempty"`
}

type CropOfInput struct {
	ID      int           `json:"id"`
	Crop    *BoxInput     `json:"crop,omitempty"`
	Canvas  *BoxInput     `json:"canvas,omitempty"`
	Rotate  int           `json:"rotate"`
	Overlay *OverlayInput `json:"overlay,omitempty"`
}

type DeleteTagInput struct {
	ID int `json:"id"`
}

type DimensionSize struct {
	Min int `json:"min"`
	Max int `json:"max"`
}

type Document struct {
	ID                   int                 `json:"id"`
	MimeType             string              `json:"mimeType"`
	Description          string              `json:"description"`
	Origin               string              `json:"origin"`
	OriginalFileName     string              `json:"originalFileName"`
	OriginalFileMimeType string              `json:"originalFileMimeType"`
	URL                  string              `json:"url"`
	Tags                 TagsListResult      `json:"tags,omitempty"`
	Year                 int                 `json:"year"`
	Licensee             CompaniesListResult `json:"licensee,omitempty"`
}

func (Document) IsEnrichMediaItemResult() {}
func (Document) IsMediaItem()             {}

type DownloadFromPhotostockInput struct {
	// media item id
	ID int `json:"id"`
	// key from PhotostockImageSize
	Size PhotostockImageSizeName `json:"size"`
}

type DownloadResult struct {
	URL string `json:"url"`
}

func (DownloadResult) IsDownloadFromPhotostockResult() {}

type EncoderTask struct {
	MediaID    int                    `json:"mediaId"`
	Status     EncoderTaskStatus      `json:"status"`
	Progress   int                    `json:"progress"`
	MimeType   string                 `json:"mimeType"`
	FailReason string                 `json:"failReason"`
	Media      EncoderTaskMediaResult `json:"media,omitempty"`
}

func (EncoderTask) IsUploadResult() {}

type EncoderTasksFilterInput struct {
	MediaIdsAnyOf           []int               `json:"mediaIdsAnyOf,omitempty"`
	StatusesAnyOf           []EncoderTaskStatus `json:"statusesAnyOf,omitempty"`
	OriginalFileHashesAnyOf []string            `json:"originalFileHashesAnyOf,omitempty"`
}

type EncoderTasksPagination struct {
	Count      int            `json:"count"`
	Items      []*EncoderTask `json:"items,omitempty"`
	TotalCount int            `json:"totalCount"`
}

func (EncoderTasksPagination) IsEncoderTasksListResult() {}

type EnrichMediaItemInput struct {
	Year             *int     `json:"year,omitempty"`
	Licensee         []string `json:"licensee,omitempty"`
	Alt              *string  `json:"alt,omitempty"`
	Description      *string  `json:"description,omitempty"`
	Origin           *string  `json:"origin,omitempty"`
	OriginalFileName *string  `json:"originalFileName,omitempty"`
	Style            *string  `json:"style,omitempty"`
	TagNames         []string `json:"tagNames,omitempty"`
	HashtagIds       []int    `json:"hashtagIds,omitempty"`
	EventIds         []int    `json:"eventIds,omitempty"`
	PersonIds        []int    `json:"personIds,omitempty"`
	URL              string   `json:"url"`
	Location         *int     `json:"location,omitempty"`
}

type EnsureTagModelInput struct {
	Name string   `json:"name"`
	Type *TagType `json:"type,omitempty"`
}

type FileNotUploadedProblem struct {
	Message string `json:"message"`
}

func (FileNotUploadedProblem) IsProblemInterface() {}
func (FileNotUploadedProblem) IsUploadResult()     {}

type FileTooBigProblem struct {
	Message string `json:"message"`
}

func (FileTooBigProblem) IsProblemInterface() {}
func (FileTooBigProblem) IsUploadResult()     {}

type GettyImage struct {
	ID            *string                   `json:"id,omitempty"`
	PreviewURL    string                    `json:"previewUrl"`
	Title         string                    `json:"title"`
	Description   string                    `json:"description"`
	DownloadSizes []*GettyImageDownloadSize `json:"downloadSizes,omitempty"`
	Keywords      []string                  `json:"keywords,omitempty"`
	LicenseModel  GettyLicenseModel         `json:"licenseModel"`
	AssetFamily   GettyAssetFamily          `json:"assetFamily"`
}

type GettyImageDownloadSize struct {
	Name   GettyImageSizeName `json:"name"`
	Width  int                `json:"width"`
	Height int                `json:"height"`
	// Существует ли размер картинки в медиа-библиотеке
	Exists bool `json:"exists"`
}

type GettyImagesFilterInput struct {
	Search      string                 `json:"search"`
	AssetFamily GettyAssetFamilyFilter `json:"assetFamily"`
}

type GettyImagesPagination struct {
	Count      int           `json:"count"`
	Items      []*GettyImage `json:"items,omitempty"`
	TotalCount int           `json:"totalCount"`
}

func (GettyImagesPagination) IsGettyImagesListResult() {}

type GettyInvalidTokenProblem struct {
	Message string `json:"message"`
}

func (GettyInvalidTokenProblem) IsGettyImagesListResult()    {}
func (GettyInvalidTokenProblem) IsDownloadGettyImageResult() {}
func (GettyInvalidTokenProblem) IsProblemInterface()         {}

type GettyLimitExceededProblem struct {
	Message string `json:"message"`
}

func (GettyLimitExceededProblem) IsDownloadGettyImageResult() {}
func (GettyLimitExceededProblem) IsProblemInterface()         {}

type GettyUserDownloadStat struct {
	// Количество скачиваний за указанный период
	Downloads int `json:"downloads"`
	// Квота пользователя
	Limit int `json:"limit"`
}

func (GettyUserDownloadStat) IsGettyUserDownloadStatResult() {}

type Image struct {
	ID                   int                 `json:"id"`
	MimeType             string              `json:"mimeType"`
	Alt                  string              `json:"alt"`
	CropData             *CropData           `json:"cropData,omitempty"`
	CropOf               CropOfResult        `json:"cropOf,omitempty"`
	Description          string              `json:"description"`
	Width                int                 `json:"width"`
	Height               int                 `json:"height"`
	Origin               string              `json:"origin"`
	Style                string              `json:"style"`
	OriginalFileName     string              `json:"originalFileName"`
	OriginalFileMimeType string              `json:"originalFileMimeType"`
	URL                  string              `json:"url"`
	Tags                 TagsListResult      `json:"tags,omitempty"`
	Year                 int                 `json:"year"`
	Orientation          Orientation         `json:"orientation"`
	Licensee             CompaniesListResult `json:"licensee,omitempty"`
	Location             *Location           `json:"location,omitempty"`
}

func (Image) IsCropOfResult()             {}
func (Image) IsEnrichMediaItemResult()    {}
func (Image) IsMediaItem()                {}
func (Image) IsDownloadGettyImageResult() {}

type InternalErrorProblem struct {
	Message string `json:"message"`
}

func (InternalErrorProblem) IsCompaniesListResult()               {}
func (InternalErrorProblem) IsCropOfResult()                      {}
func (InternalErrorProblem) IsDownloadFromPhotostockResult()      {}
func (InternalErrorProblem) IsUpdateTagResult()                   {}
func (InternalErrorProblem) IsGettyImagesListResult()             {}
func (InternalErrorProblem) IsSearchInPhotostockResult()          {}
func (InternalErrorProblem) IsGettyUserDownloadStatResult()       {}
func (InternalErrorProblem) IsTagWithMediaItemsCountsListResult() {}
func (InternalErrorProblem) IsEnrichMediaItemResult()             {}
func (InternalErrorProblem) IsArchiveMediaItemsResult()           {}
func (InternalErrorProblem) IsLocationsListResult()               {}
func (InternalErrorProblem) IsMediaItemsListResult()              {}
func (InternalErrorProblem) IsDownloadGettyImageResult()          {}
func (InternalErrorProblem) IsArchiverTasksListResult()           {}
func (InternalErrorProblem) IsUpdateMediaLinksResult()            {}
func (InternalErrorProblem) IsDeleteTagResult()                   {}
func (InternalErrorProblem) IsProblemInterface()                  {}
func (InternalErrorProblem) IsEncoderTaskMediaResult()            {}
func (InternalErrorProblem) IsUploadResult()                      {}
func (InternalErrorProblem) IsEncoderTasksListResult()            {}
func (InternalErrorProblem) IsEnsureTagResult()                   {}
func (InternalErrorProblem) IsTagsListResult()                    {}

type InvalidCropProblem struct {
	Message string `json:"message"`
}

func (InvalidCropProblem) IsProblemInterface() {}
func (InvalidCropProblem) IsUploadResult()     {}

type Location struct {
	ID          int    `json:"id"`
	IsActive    bool   `json:"isActive"`
	DisplayName string `json:"displayName"`
}

type LocationsFilterInput struct {
	IdsAnyOf []int   `json:"idsAnyOf,omitempty"`
	Search   *string `json:"search,omitempty"`
	IsActive *bool   `json:"isActive,omitempty"`
}

type LocationsPagination struct {
	Count      int         `json:"count"`
	Items      []*Location `json:"items,omitempty"`
	TotalCount int         `json:"totalCount"`
}

func (LocationsPagination) IsLocationsListResult() {}

type LogoOverlay struct {
	Project ProjectKey `json:"project"`
}

type LogoOverlayInput struct {
	Project ProjectKey `json:"project"`
}

type MediaItemsFilterInput struct {
	ProjectKey  *ProjectKey `json:"projectKey,omitempty"`
	IdsAnyOf    []int       `json:"idsAnyOf,omitempty"`
	TagsEveryIn []int       `json:"tagsEveryIn,omitempty"`
	// массив должен состоять минимум из 2х элементов, в противном случае вернется пустой результат
	TagsXOROf          []int           `json:"tagsXOROf,omitempty"`
	TagsAnyOf          []int           `json:"tagsAnyOf,omitempty"`
	UrlsAnyOf          []string        `json:"urlsAnyOf,omitempty"`
	HashesAnyOf        []string        `json:"hashesAnyOf,omitempty"`
	OptionsAnyOf       []FilterOption  `json:"optionsAnyOf,omitempty"`
	YearFrom           *int            `json:"yearFrom,omitempty"`
	YearTo             *int            `json:"yearTo,omitempty"`
	Licensee           *string         `json:"licensee,omitempty"`
	Origin             *string         `json:"origin,omitempty"`
	Orientation        *Orientation    `json:"orientation,omitempty"`
	WidthMin           *int            `json:"widthMin,omitempty"`
	WidthMax           *int            `json:"widthMax,omitempty"`
	HeightMin          *int            `json:"heightMin,omitempty"`
	HeightMax          *int            `json:"heightMax,omitempty"`
	MediaItemTypeAnyOf []MediaItemType `json:"mediaItemTypeAnyOf,omitempty"`
	MimeTypesAnyOf     []string        `json:"mimeTypesAnyOf,omitempty"`
	OnlyOriginals      *bool           `json:"onlyOriginals,omitempty"`
	Location           *int            `json:"location,omitempty"`
	ExcludeHidden      *bool           `json:"excludeHidden,omitempty"`
}

type MediaItemsPagination struct {
	Count      int         `json:"count"`
	Items      []MediaItem `json:"items,omitempty"`
	TotalCount int         `json:"totalCount"`
}

func (MediaItemsPagination) IsMediaItemsListResult() {}

type NotFoundProblem struct {
	Message string `json:"message"`
}

func (NotFoundProblem) IsDownloadFromPhotostockResult() {}
func (NotFoundProblem) IsUpdateTagResult()              {}
func (NotFoundProblem) IsEnrichMediaItemResult()        {}
func (NotFoundProblem) IsDownloadGettyImageResult()     {}
func (NotFoundProblem) IsProblemInterface()             {}
func (NotFoundProblem) IsDeleteTagResult()              {}

type OperationResult struct {
	Success bool `json:"success"`
}

func (OperationResult) IsUpdateMediaLinksResult() {}
func (OperationResult) IsDeleteTagResult()        {}

type Overlay struct {
	TransparentOverlay *TransparentOverlay    `json:"transparentOverlay,omitempty"`
	AgeRestriction     *AgeRestrictionOverlay `json:"ageRestriction,omitempty"`
	Text               *TextOverlay           `json:"text,omitempty"`
	Logo               *LogoOverlay           `json:"logo,omitempty"`
}

type OverlayInput struct {
	TransparentOverlay *TransparentOverlayInput    `json:"transparentOverlay,omitempty"`
	AgeRestriction     *AgeRestrictionOverlayInput `json:"ageRestriction,omitempty"`
	Text               *TextOverlayInput           `json:"text,omitempty"`
	Logo               *LogoOverlayInput           `json:"logo,omitempty"`
}

type PhotostockImage struct {
	// media ID
	ID int `json:"id"`
	// thumbnail URL for results list
	Thumbnail string `json:"thumbnail"`
	// available image sizes
	Sizes []*PhotostockImageSize `json:"sizes,omitempty"`
	// image width
	Width int `json:"width"`
	// image height
	Height int `json:"height"`
	// image description
	Description string `json:"description"`
	// photo source
	Origin string `json:"origin"`
	// mime type, ex.: image/jpeg, image/png
	MimeType string `json:"mimeType"`
	// photo orientation (SQUARE, HORIZONTAL, VERTICAL)
	Orientation Orientation `json:"orientation"`
	// year when photo was taken
	Year int `json:"year"`
	// tags linked with photo
	Tags TagsListResult `json:"tags,omitempty"`
}

func (PhotostockImage) IsPhotostockItem() {}

type PhotostockImageSize struct {
	Key    PhotostockImageSizeName `json:"key"`
	Width  int                     `json:"width"`
	Height int                     `json:"height"`
}

type PhotostockPagination struct {
	Count      int              `json:"count"`
	Items      []PhotostockItem `json:"items,omitempty"`
	TotalCount int              `json:"totalCount"`
}

func (PhotostockPagination) IsSearchInPhotostockResult() {}

type SearchInPhotostockFilterInput struct {
	// matches for any ID from list
	IdsAnyOf []int `json:"idsAnyOf,omitempty"`
	// filter by orientation (SQUARE, HORIZONTAL, VERTICAL)
	Orientation *Orientation `json:"orientation,omitempty"`
	// filter by year greater or equals than
	YearFrom *int `json:"yearFrom,omitempty"`
	// filter by year lower or equals than
	YearTo *int `json:"yearTo,omitempty"`
	// filter by width greater or equals than
	LargestDimension *DimensionSize `json:"largestDimension,omitempty"`
	// tag keywords to search linked images
	Keywords []string `json:"keywords,omitempty"`
}

type Tag struct {
	CreatedAt  time.Time `json:"createdAt"`
	ID         int       `json:"id"`
	ModifiedAt time.Time `json:"modifiedAt"`
	Name       string    `json:"name"`
	Type       TagType   `json:"type"`
}

func (Tag) IsUpdateTagResult() {}
func (Tag) IsEnsureTagResult() {}

type TagWithMediaItemsCount struct {
	ImagesCount int  `json:"imagesCount"`
	Tag         *Tag `json:"tag,omitempty"`
}

type TagWithMediaItemsCountsPagination struct {
	Count      int                       `json:"count"`
	Items      []*TagWithMediaItemsCount `json:"items,omitempty"`
	TotalCount int                       `json:"totalCount"`
}

func (TagWithMediaItemsCountsPagination) IsTagWithMediaItemsCountsListResult() {}

type TagWithMediaItemsFilterInput struct {
	IdsAnyOf       []int       `json:"idsAnyOf,omitempty"`
	ExcludeNames   []string    `json:"excludeNames,omitempty"`
	OnlyWithImages *bool       `json:"onlyWithImages,omitempty"`
	ProjectKey     *ProjectKey `json:"projectKey,omitempty"`
	Licensee       *string     `json:"licensee,omitempty"`
	Search         *string     `json:"search,omitempty"`
	Type           *TagType    `json:"type,omitempty"`
}

type TagsFilterInput struct {
	IdsAnyOf     []int    `json:"idsAnyOf,omitempty"`
	ExcludeNames []string `json:"excludeNames,omitempty"`
	Search       *string  `json:"search,omitempty"`
	Type         *TagType `json:"type,omitempty"`
}

type TagsPagination struct {
	Count      int    `json:"count"`
	Items      []*Tag `json:"items,omitempty"`
	TotalCount int    `json:"totalCount"`
}

func (TagsPagination) IsTagsListResult() {}

type TextOverlay struct {
	Text string `json:"text"`
}

type TextOverlayInput struct {
	Text string `json:"text"`
}

type TransparentOverlay struct {
	Color TransparentOverlayColor `json:"color"`
}

type TransparentOverlayInput struct {
	Color TransparentOverlayColor `json:"color"`
}

type UnsupportedFileTypeProblem struct {
	Message string `json:"message"`
}

func (UnsupportedFileTypeProblem) IsProblemInterface() {}
func (UnsupportedFileTypeProblem) IsUploadResult()     {}

type UpdateTagInput struct {
	ID   int     `json:"id"`
	Name string  `json:"name"`
	Type TagType `json:"type"`
}

type UploadedAudio struct {
	Item       *Audio     `json:"item,omitempty"`
	UploadType UploadType `json:"uploadType"`
}

func (UploadedAudio) IsUploadedMediaItem() {}
func (UploadedAudio) IsUploadResult()      {}

type UploadedDocument struct {
	Item       *Document  `json:"item,omitempty"`
	UploadType UploadType `json:"uploadType"`
}

func (UploadedDocument) IsUploadedMediaItem() {}
func (UploadedDocument) IsUploadResult()      {}

type UploadedImage struct {
	Item       *Image     `json:"item,omitempty"`
	UploadType UploadType `json:"uploadType"`
}

func (UploadedImage) IsUploadedMediaItem() {}
func (UploadedImage) IsUploadResult()      {}

type UploadedVideo struct {
	Item       *Video     `json:"item,omitempty"`
	UploadType UploadType `json:"uploadType"`
}

func (UploadedVideo) IsUploadedMediaItem() {}
func (UploadedVideo) IsUploadResult()      {}

type ValidationError struct {
	Message string `json:"message"`
}

func (ValidationError) IsCompaniesListResult()               {}
func (ValidationError) IsUpdateTagResult()                   {}
func (ValidationError) IsTagWithMediaItemsCountsListResult() {}
func (ValidationError) IsArchiveMediaItemsResult()           {}
func (ValidationError) IsLocationsListResult()               {}
func (ValidationError) IsArchiverTasksListResult()           {}
func (ValidationError) IsProblemInterface()                  {}
func (ValidationError) IsTagsListResult()                    {}

type Video struct {
	ID                   int                 `json:"id"`
	MimeType             string              `json:"mimeType"`
	Description          string              `json:"description"`
	Width                int                 `json:"width"`
	Height               int                 `json:"height"`
	Duration             float64             `json:"duration"`
	Origin               string              `json:"origin"`
	OriginalFileName     string              `json:"originalFileName"`
	OriginalFileMimeType string              `json:"originalFileMimeType"`
	PreviewURL           string              `json:"previewUrl"`
	URL                  string              `json:"url"`
	Tags                 TagsListResult      `json:"tags,omitempty"`
	Year                 int                 `json:"year"`
	Orientation          Orientation         `json:"orientation"`
	Licensee             CompaniesListResult `json:"licensee,omitempty"`
}

func (Video) IsMediaItem()              {}
func (Video) IsEnrichMediaItemResult()  {}
func (Video) IsEncoderTaskMediaResult() {}

// Действия над объектами сервиса
type Action string

const (
	// Поиск
	ActionView Action = "view"
	// Создание
	ActionCreate Action = "create"
	// Изменение
	ActionUpdate Action = "update"
	// Создание или изменение
	ActionEnsure Action = "ensure"
	// Загрузить
	ActionUpload Action = "upload"
	// Удалить
	ActionDelete Action = "delete"
	// Скачать
	ActionDownload Action = "download"
)

var AllAction = []Action{
	ActionView,
	ActionCreate,
	ActionUpdate,
	ActionEnsure,
	ActionUpload,
	ActionDelete,
	ActionDownload,
}

func (e Action) IsValid() bool {
	switch e {
	case ActionView, ActionCreate, ActionUpdate, ActionEnsure, ActionUpload, ActionDelete, ActionDownload:
		return true
	}
	return false
}

func (e Action) String() string {
	return string(e)
}

func (e *Action) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Action(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Action", str)
	}
	return nil
}

func (e Action) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AgeRestriction string

const (
	AgeRestrictionAge18Plus AgeRestriction = "AGE_18_PLUS"
)

var AllAgeRestriction = []AgeRestriction{
	AgeRestrictionAge18Plus,
}

func (e AgeRestriction) IsValid() bool {
	switch e {
	case AgeRestrictionAge18Plus:
		return true
	}
	return false
}

func (e AgeRestriction) String() string {
	return string(e)
}

func (e *AgeRestriction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgeRestriction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgeRestriction", str)
	}
	return nil
}

func (e AgeRestriction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArchiverTaskStatus string

const (
	ArchiverTaskStatusEnqueued   ArchiverTaskStatus = "ENQUEUED"
	ArchiverTaskStatusProcessing ArchiverTaskStatus = "PROCESSING"
	ArchiverTaskStatusDone       ArchiverTaskStatus = "DONE"
	ArchiverTaskStatusFailed     ArchiverTaskStatus = "FAILED"
)

var AllArchiverTaskStatus = []ArchiverTaskStatus{
	ArchiverTaskStatusEnqueued,
	ArchiverTaskStatusProcessing,
	ArchiverTaskStatusDone,
	ArchiverTaskStatusFailed,
}

func (e ArchiverTaskStatus) IsValid() bool {
	switch e {
	case ArchiverTaskStatusEnqueued, ArchiverTaskStatusProcessing, ArchiverTaskStatusDone, ArchiverTaskStatusFailed:
		return true
	}
	return false
}

func (e ArchiverTaskStatus) String() string {
	return string(e)
}

func (e *ArchiverTaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArchiverTaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArchiverTaskStatus", str)
	}
	return nil
}

func (e ArchiverTaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ArchiverTasksSort string

const (
	ArchiverTasksSortIDAsc  ArchiverTasksSort = "ID_ASC"
	ArchiverTasksSortIDDesc ArchiverTasksSort = "ID_DESC"
)

var AllArchiverTasksSort = []ArchiverTasksSort{
	ArchiverTasksSortIDAsc,
	ArchiverTasksSortIDDesc,
}

func (e ArchiverTasksSort) IsValid() bool {
	switch e {
	case ArchiverTasksSortIDAsc, ArchiverTasksSortIDDesc:
		return true
	}
	return false
}

func (e ArchiverTasksSort) String() string {
	return string(e)
}

func (e *ArchiverTasksSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ArchiverTasksSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ArchiverTasksSort", str)
	}
	return nil
}

func (e ArchiverTasksSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EncoderTaskStatus string

const (
	EncoderTaskStatusEnqueued   EncoderTaskStatus = "ENQUEUED"
	EncoderTaskStatusProcessing EncoderTaskStatus = "PROCESSING"
	EncoderTaskStatusDone       EncoderTaskStatus = "DONE"
	EncoderTaskStatusFailed     EncoderTaskStatus = "FAILED"
)

var AllEncoderTaskStatus = []EncoderTaskStatus{
	EncoderTaskStatusEnqueued,
	EncoderTaskStatusProcessing,
	EncoderTaskStatusDone,
	EncoderTaskStatusFailed,
}

func (e EncoderTaskStatus) IsValid() bool {
	switch e {
	case EncoderTaskStatusEnqueued, EncoderTaskStatusProcessing, EncoderTaskStatusDone, EncoderTaskStatusFailed:
		return true
	}
	return false
}

func (e EncoderTaskStatus) String() string {
	return string(e)
}

func (e *EncoderTaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EncoderTaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EncoderTaskStatus", str)
	}
	return nil
}

func (e EncoderTaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EncoderTasksSort string

const (
	EncoderTasksSortIDAsc  EncoderTasksSort = "ID_ASC"
	EncoderTasksSortIDDesc EncoderTasksSort = "ID_DESC"
)

var AllEncoderTasksSort = []EncoderTasksSort{
	EncoderTasksSortIDAsc,
	EncoderTasksSortIDDesc,
}

func (e EncoderTasksSort) IsValid() bool {
	switch e {
	case EncoderTasksSortIDAsc, EncoderTasksSortIDDesc:
		return true
	}
	return false
}

func (e EncoderTasksSort) String() string {
	return string(e)
}

func (e *EncoderTasksSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EncoderTasksSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EncoderTasksSort", str)
	}
	return nil
}

func (e EncoderTasksSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FilterOption string

const (
	FilterOptionWithoutHashtag FilterOption = "WITHOUT_HASHTAG"
	FilterOptionWithoutYear    FilterOption = "WITHOUT_YEAR"
	FilterOptionWithoutPerson  FilterOption = "WITHOUT_PERSON"
	FilterOptionWithoutEvent   FilterOption = "WITHOUT_EVENT"
)

var AllFilterOption = []FilterOption{
	FilterOptionWithoutHashtag,
	FilterOptionWithoutYear,
	FilterOptionWithoutPerson,
	FilterOptionWithoutEvent,
}

func (e FilterOption) IsValid() bool {
	switch e {
	case FilterOptionWithoutHashtag, FilterOptionWithoutYear, FilterOptionWithoutPerson, FilterOptionWithoutEvent:
		return true
	}
	return false
}

func (e FilterOption) String() string {
	return string(e)
}

func (e *FilterOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterOption", str)
	}
	return nil
}

func (e FilterOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GettyAssetFamily string

const (
	GettyAssetFamilyCreative  GettyAssetFamily = "CREATIVE"
	GettyAssetFamilyEditorial GettyAssetFamily = "EDITORIAL"
)

var AllGettyAssetFamily = []GettyAssetFamily{
	GettyAssetFamilyCreative,
	GettyAssetFamilyEditorial,
}

func (e GettyAssetFamily) IsValid() bool {
	switch e {
	case GettyAssetFamilyCreative, GettyAssetFamilyEditorial:
		return true
	}
	return false
}

func (e GettyAssetFamily) String() string {
	return string(e)
}

func (e *GettyAssetFamily) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GettyAssetFamily(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GettyAssetFamily", str)
	}
	return nil
}

func (e GettyAssetFamily) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GettyAssetFamilyFilter string

const (
	GettyAssetFamilyFilterAll       GettyAssetFamilyFilter = "ALL"
	GettyAssetFamilyFilterCreative  GettyAssetFamilyFilter = "CREATIVE"
	GettyAssetFamilyFilterEditorial GettyAssetFamilyFilter = "EDITORIAL"
)

var AllGettyAssetFamilyFilter = []GettyAssetFamilyFilter{
	GettyAssetFamilyFilterAll,
	GettyAssetFamilyFilterCreative,
	GettyAssetFamilyFilterEditorial,
}

func (e GettyAssetFamilyFilter) IsValid() bool {
	switch e {
	case GettyAssetFamilyFilterAll, GettyAssetFamilyFilterCreative, GettyAssetFamilyFilterEditorial:
		return true
	}
	return false
}

func (e GettyAssetFamilyFilter) String() string {
	return string(e)
}

func (e *GettyAssetFamilyFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GettyAssetFamilyFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GettyAssetFamilyFilter", str)
	}
	return nil
}

func (e GettyAssetFamilyFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GettyImageSizeName string

const (
	GettyImageSizeNameXSmall  GettyImageSizeName = "X_SMALL"
	GettyImageSizeNameSmall   GettyImageSizeName = "SMALL"
	GettyImageSizeNameMedium  GettyImageSizeName = "MEDIUM"
	GettyImageSizeNameLarge   GettyImageSizeName = "LARGE"
	GettyImageSizeNameXLarge  GettyImageSizeName = "X_LARGE"
	GettyImageSizeNameXxLarge GettyImageSizeName = "XX_LARGE"
)

var AllGettyImageSizeName = []GettyImageSizeName{
	GettyImageSizeNameXSmall,
	GettyImageSizeNameSmall,
	GettyImageSizeNameMedium,
	GettyImageSizeNameLarge,
	GettyImageSizeNameXLarge,
	GettyImageSizeNameXxLarge,
}

func (e GettyImageSizeName) IsValid() bool {
	switch e {
	case GettyImageSizeNameXSmall, GettyImageSizeNameSmall, GettyImageSizeNameMedium, GettyImageSizeNameLarge, GettyImageSizeNameXLarge, GettyImageSizeNameXxLarge:
		return true
	}
	return false
}

func (e GettyImageSizeName) String() string {
	return string(e)
}

func (e *GettyImageSizeName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GettyImageSizeName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GettyImageSizeName", str)
	}
	return nil
}

func (e GettyImageSizeName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GettyImagesSort string

const (
	GettyImagesSortBestMatch   GettyImagesSort = "BEST_MATCH"
	GettyImagesSortMostPopular GettyImagesSort = "MOST_POPULAR"
	GettyImagesSortNewest      GettyImagesSort = "NEWEST"
	GettyImagesSortOldest      GettyImagesSort = "OLDEST"
	GettyImagesSortRandom      GettyImagesSort = "RANDOM"
)

var AllGettyImagesSort = []GettyImagesSort{
	GettyImagesSortBestMatch,
	GettyImagesSortMostPopular,
	GettyImagesSortNewest,
	GettyImagesSortOldest,
	GettyImagesSortRandom,
}

func (e GettyImagesSort) IsValid() bool {
	switch e {
	case GettyImagesSortBestMatch, GettyImagesSortMostPopular, GettyImagesSortNewest, GettyImagesSortOldest, GettyImagesSortRandom:
		return true
	}
	return false
}

func (e GettyImagesSort) String() string {
	return string(e)
}

func (e *GettyImagesSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GettyImagesSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GettyImagesSort", str)
	}
	return nil
}

func (e GettyImagesSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GettyLicenseModel string

const (
	GettyLicenseModelRoyaltyFree   GettyLicenseModel = "ROYALTY_FREE"
	GettyLicenseModelRightsManaged GettyLicenseModel = "RIGHTS_MANAGED"
	GettyLicenseModelUnknown       GettyLicenseModel = "UNKNOWN"
)

var AllGettyLicenseModel = []GettyLicenseModel{
	GettyLicenseModelRoyaltyFree,
	GettyLicenseModelRightsManaged,
	GettyLicenseModelUnknown,
}

func (e GettyLicenseModel) IsValid() bool {
	switch e {
	case GettyLicenseModelRoyaltyFree, GettyLicenseModelRightsManaged, GettyLicenseModelUnknown:
		return true
	}
	return false
}

func (e GettyLicenseModel) String() string {
	return string(e)
}

func (e *GettyLicenseModel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GettyLicenseModel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GettyLicenseModel", str)
	}
	return nil
}

func (e GettyLicenseModel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GettyUserDownloadStatPeriod string

const (
	GettyUserDownloadStatPeriodCurrentMonth GettyUserDownloadStatPeriod = "CURRENT_MONTH"
	GettyUserDownloadStatPeriodCurrentYear  GettyUserDownloadStatPeriod = "CURRENT_YEAR"
)

var AllGettyUserDownloadStatPeriod = []GettyUserDownloadStatPeriod{
	GettyUserDownloadStatPeriodCurrentMonth,
	GettyUserDownloadStatPeriodCurrentYear,
}

func (e GettyUserDownloadStatPeriod) IsValid() bool {
	switch e {
	case GettyUserDownloadStatPeriodCurrentMonth, GettyUserDownloadStatPeriodCurrentYear:
		return true
	}
	return false
}

func (e GettyUserDownloadStatPeriod) String() string {
	return string(e)
}

func (e *GettyUserDownloadStatPeriod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GettyUserDownloadStatPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GettyUserDownloadStatPeriod", str)
	}
	return nil
}

func (e GettyUserDownloadStatPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationsSort string

const (
	LocationsSortIDAsc    LocationsSort = "ID_ASC"
	LocationsSortIDDesc   LocationsSort = "ID_DESC"
	LocationsSortNameAsc  LocationsSort = "NAME_ASC"
	LocationsSortNameDesc LocationsSort = "NAME_DESC"
)

var AllLocationsSort = []LocationsSort{
	LocationsSortIDAsc,
	LocationsSortIDDesc,
	LocationsSortNameAsc,
	LocationsSortNameDesc,
}

func (e LocationsSort) IsValid() bool {
	switch e {
	case LocationsSortIDAsc, LocationsSortIDDesc, LocationsSortNameAsc, LocationsSortNameDesc:
		return true
	}
	return false
}

func (e LocationsSort) String() string {
	return string(e)
}

func (e *LocationsSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationsSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationsSort", str)
	}
	return nil
}

func (e LocationsSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MediaItemType string

const (
	MediaItemTypeImage    MediaItemType = "IMAGE"
	MediaItemTypeVideo    MediaItemType = "VIDEO"
	MediaItemTypeAudio    MediaItemType = "AUDIO"
	MediaItemTypeDocument MediaItemType = "DOCUMENT"
)

var AllMediaItemType = []MediaItemType{
	MediaItemTypeImage,
	MediaItemTypeVideo,
	MediaItemTypeAudio,
	MediaItemTypeDocument,
}

func (e MediaItemType) IsValid() bool {
	switch e {
	case MediaItemTypeImage, MediaItemTypeVideo, MediaItemTypeAudio, MediaItemTypeDocument:
		return true
	}
	return false
}

func (e MediaItemType) String() string {
	return string(e)
}

func (e *MediaItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaItemType", str)
	}
	return nil
}

func (e MediaItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MediaItemsSort string

const (
	MediaItemsSortIDAsc         MediaItemsSort = "ID_ASC"
	MediaItemsSortIDDesc        MediaItemsSort = "ID_DESC"
	MediaItemsSortTagsCountDesc MediaItemsSort = "TAGS_COUNT_DESC"
)

var AllMediaItemsSort = []MediaItemsSort{
	MediaItemsSortIDAsc,
	MediaItemsSortIDDesc,
	MediaItemsSortTagsCountDesc,
}

func (e MediaItemsSort) IsValid() bool {
	switch e {
	case MediaItemsSortIDAsc, MediaItemsSortIDDesc, MediaItemsSortTagsCountDesc:
		return true
	}
	return false
}

func (e MediaItemsSort) String() string {
	return string(e)
}

func (e *MediaItemsSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MediaItemsSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MediaItemsSort", str)
	}
	return nil
}

func (e MediaItemsSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Объекты (ресурсы) сервиса
type Object string

const (
	// Медиа-файл
	ObjectMediaItem Object = "mediaItem"
	// Хэштег
	ObjectTag Object = "tag"
	// Компания-лицензиат
	ObjectCompany Object = "company"
	// Getty-картинка
	ObjectGettyImage Object = "gettyImage"
	// Getty-статистика
	ObjectGettyStat Object = "gettyStat"
	// Задача по преобразованию медиа-файла
	ObjectEncoderTask Object = "encoderTask"
	// Photostock медиафайл
	ObjectPhotostockItem Object = "photostockItem"
	// Местоположение
	ObjectLocationItem Object = "locationItem"
	// Задача архиватора
	ObjectArchiverTask Object = "archiverTask"
	// Связь статья - медиа-файл
	ObjectMediaItemLink Object = "mediaItemLink"
)

var AllObject = []Object{
	ObjectMediaItem,
	ObjectTag,
	ObjectCompany,
	ObjectGettyImage,
	ObjectGettyStat,
	ObjectEncoderTask,
	ObjectPhotostockItem,
	ObjectLocationItem,
	ObjectArchiverTask,
	ObjectMediaItemLink,
}

func (e Object) IsValid() bool {
	switch e {
	case ObjectMediaItem, ObjectTag, ObjectCompany, ObjectGettyImage, ObjectGettyStat, ObjectEncoderTask, ObjectPhotostockItem, ObjectLocationItem, ObjectArchiverTask, ObjectMediaItemLink:
		return true
	}
	return false
}

func (e Object) String() string {
	return string(e)
}

func (e *Object) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Object(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Object", str)
	}
	return nil
}

func (e Object) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Optimize string

const (
	OptimizeUpscaleToSocial Optimize = "UPSCALE_TO_SOCIAL"
)

var AllOptimize = []Optimize{
	OptimizeUpscaleToSocial,
}

func (e Optimize) IsValid() bool {
	switch e {
	case OptimizeUpscaleToSocial:
		return true
	}
	return false
}

func (e Optimize) String() string {
	return string(e)
}

func (e *Optimize) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Optimize(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Optimize", str)
	}
	return nil
}

func (e Optimize) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Orientation string

const (
	OrientationHorizontal Orientation = "HORIZONTAL"
	OrientationVertical   Orientation = "VERTICAL"
	OrientationSquare     Orientation = "SQUARE"
)

var AllOrientation = []Orientation{
	OrientationHorizontal,
	OrientationVertical,
	OrientationSquare,
}

func (e Orientation) IsValid() bool {
	switch e {
	case OrientationHorizontal, OrientationVertical, OrientationSquare:
		return true
	}
	return false
}

func (e Orientation) String() string {
	return string(e)
}

func (e *Orientation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Orientation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Orientation", str)
	}
	return nil
}

func (e Orientation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PhotostockImageSizeName string

const (
	PhotostockImageSizeNameSmall  PhotostockImageSizeName = "SMALL"
	PhotostockImageSizeNameMedium PhotostockImageSizeName = "MEDIUM"
	PhotostockImageSizeNameLarge  PhotostockImageSizeName = "LARGE"
)

var AllPhotostockImageSizeName = []PhotostockImageSizeName{
	PhotostockImageSizeNameSmall,
	PhotostockImageSizeNameMedium,
	PhotostockImageSizeNameLarge,
}

func (e PhotostockImageSizeName) IsValid() bool {
	switch e {
	case PhotostockImageSizeNameSmall, PhotostockImageSizeNameMedium, PhotostockImageSizeNameLarge:
		return true
	}
	return false
}

func (e PhotostockImageSizeName) String() string {
	return string(e)
}

func (e *PhotostockImageSizeName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhotostockImageSizeName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhotostockImageSizeName", str)
	}
	return nil
}

func (e PhotostockImageSizeName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectKey string

const (
	ProjectKeyWday           ProjectKey = "WDAY"
	ProjectKeyWoman          ProjectKey = "WOMAN"
	ProjectKeyMaxim          ProjectKey = "MAXIM"
	ProjectKeyMarieclaire    ProjectKey = "MARIECLAIRE"
	ProjectKeyEllegirl       ProjectKey = "ELLEGIRL"
	ProjectKeyN1             ProjectKey = "N1"
	ProjectKeyGm             ProjectKey = "GM"
	ProjectKeyElle           ProjectKey = "ELLE"
	ProjectKeyElledecoration ProjectKey = "ELLEDECORATION"
	ProjectKeyParents        ProjectKey = "PARENTS"
	ProjectKeyPsychologies   ProjectKey = "PSYCHOLOGIES"
	ProjectKeyVokrugsveta    ProjectKey = "VOKRUGSVETA"
	ProjectKeyDoctorpiter    ProjectKey = "DOCTORPITER"
	ProjectKeyLegionmedia    ProjectKey = "LEGIONMEDIA"
	ProjectKeyPortal         ProjectKey = "PORTAL"
	ProjectKeyStarhit        ProjectKey = "STARHIT"
)

var AllProjectKey = []ProjectKey{
	ProjectKeyWday,
	ProjectKeyWoman,
	ProjectKeyMaxim,
	ProjectKeyMarieclaire,
	ProjectKeyEllegirl,
	ProjectKeyN1,
	ProjectKeyGm,
	ProjectKeyElle,
	ProjectKeyElledecoration,
	ProjectKeyParents,
	ProjectKeyPsychologies,
	ProjectKeyVokrugsveta,
	ProjectKeyDoctorpiter,
	ProjectKeyLegionmedia,
	ProjectKeyPortal,
	ProjectKeyStarhit,
}

func (e ProjectKey) IsValid() bool {
	switch e {
	case ProjectKeyWday, ProjectKeyWoman, ProjectKeyMaxim, ProjectKeyMarieclaire, ProjectKeyEllegirl, ProjectKeyN1, ProjectKeyGm, ProjectKeyElle, ProjectKeyElledecoration, ProjectKeyParents, ProjectKeyPsychologies, ProjectKeyVokrugsveta, ProjectKeyDoctorpiter, ProjectKeyLegionmedia, ProjectKeyPortal, ProjectKeyStarhit:
		return true
	}
	return false
}

func (e ProjectKey) String() string {
	return string(e)
}

func (e *ProjectKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectKey", str)
	}
	return nil
}

func (e ProjectKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchInPhotostockSort string

const (
	// new media items first. Default
	SearchInPhotostockSortNewest SearchInPhotostockSort = "NEWEST"
)

var AllSearchInPhotostockSort = []SearchInPhotostockSort{
	SearchInPhotostockSortNewest,
}

func (e SearchInPhotostockSort) IsValid() bool {
	switch e {
	case SearchInPhotostockSortNewest:
		return true
	}
	return false
}

func (e SearchInPhotostockSort) String() string {
	return string(e)
}

func (e *SearchInPhotostockSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchInPhotostockSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchInPhotostockSort", str)
	}
	return nil
}

func (e SearchInPhotostockSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagType string

const (
	TagTypeHashtag TagType = "HASHTAG"
	TagTypePerson  TagType = "PERSON"
	TagTypeEvent   TagType = "EVENT"
)

var AllTagType = []TagType{
	TagTypeHashtag,
	TagTypePerson,
	TagTypeEvent,
}

func (e TagType) IsValid() bool {
	switch e {
	case TagTypeHashtag, TagTypePerson, TagTypeEvent:
		return true
	}
	return false
}

func (e TagType) String() string {
	return string(e)
}

func (e *TagType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagType", str)
	}
	return nil
}

func (e TagType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagWithMediaItemsSort string

const (
	TagWithMediaItemsSortIDAsc               TagWithMediaItemsSort = "ID_ASC"
	TagWithMediaItemsSortIDDesc              TagWithMediaItemsSort = "ID_DESC"
	TagWithMediaItemsSortNameAsc             TagWithMediaItemsSort = "NAME_ASC"
	TagWithMediaItemsSortNameDesc            TagWithMediaItemsSort = "NAME_DESC"
	TagWithMediaItemsSortCreatedAtAsc        TagWithMediaItemsSort = "CREATED_AT_ASC"
	TagWithMediaItemsSortCreatedAtDesc       TagWithMediaItemsSort = "CREATED_AT_DESC"
	TagWithMediaItemsSortMediaItemsCountAsc  TagWithMediaItemsSort = "MEDIA_ITEMS_COUNT_ASC"
	TagWithMediaItemsSortMediaItemsCountDesc TagWithMediaItemsSort = "MEDIA_ITEMS_COUNT_DESC"
	TagWithMediaItemsSortSimilarity          TagWithMediaItemsSort = "SIMILARITY"
)

var AllTagWithMediaItemsSort = []TagWithMediaItemsSort{
	TagWithMediaItemsSortIDAsc,
	TagWithMediaItemsSortIDDesc,
	TagWithMediaItemsSortNameAsc,
	TagWithMediaItemsSortNameDesc,
	TagWithMediaItemsSortCreatedAtAsc,
	TagWithMediaItemsSortCreatedAtDesc,
	TagWithMediaItemsSortMediaItemsCountAsc,
	TagWithMediaItemsSortMediaItemsCountDesc,
	TagWithMediaItemsSortSimilarity,
}

func (e TagWithMediaItemsSort) IsValid() bool {
	switch e {
	case TagWithMediaItemsSortIDAsc, TagWithMediaItemsSortIDDesc, TagWithMediaItemsSortNameAsc, TagWithMediaItemsSortNameDesc, TagWithMediaItemsSortCreatedAtAsc, TagWithMediaItemsSortCreatedAtDesc, TagWithMediaItemsSortMediaItemsCountAsc, TagWithMediaItemsSortMediaItemsCountDesc, TagWithMediaItemsSortSimilarity:
		return true
	}
	return false
}

func (e TagWithMediaItemsSort) String() string {
	return string(e)
}

func (e *TagWithMediaItemsSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagWithMediaItemsSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagWithMediaItemsSort", str)
	}
	return nil
}

func (e TagWithMediaItemsSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagsSort string

const (
	TagsSortIDAsc         TagsSort = "ID_ASC"
	TagsSortIDDesc        TagsSort = "ID_DESC"
	TagsSortNameAsc       TagsSort = "NAME_ASC"
	TagsSortNameDesc      TagsSort = "NAME_DESC"
	TagsSortCreatedAtAsc  TagsSort = "CREATED_AT_ASC"
	TagsSortCreatedAtDesc TagsSort = "CREATED_AT_DESC"
	TagsSortSimilarity    TagsSort = "SIMILARITY"
)

var AllTagsSort = []TagsSort{
	TagsSortIDAsc,
	TagsSortIDDesc,
	TagsSortNameAsc,
	TagsSortNameDesc,
	TagsSortCreatedAtAsc,
	TagsSortCreatedAtDesc,
	TagsSortSimilarity,
}

func (e TagsSort) IsValid() bool {
	switch e {
	case TagsSortIDAsc, TagsSortIDDesc, TagsSortNameAsc, TagsSortNameDesc, TagsSortCreatedAtAsc, TagsSortCreatedAtDesc, TagsSortSimilarity:
		return true
	}
	return false
}

func (e TagsSort) String() string {
	return string(e)
}

func (e *TagsSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagsSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagsSort", str)
	}
	return nil
}

func (e TagsSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransparentOverlayColor string

const (
	TransparentOverlayColorBlack TransparentOverlayColor = "BLACK"
)

var AllTransparentOverlayColor = []TransparentOverlayColor{
	TransparentOverlayColorBlack,
}

func (e TransparentOverlayColor) IsValid() bool {
	switch e {
	case TransparentOverlayColorBlack:
		return true
	}
	return false
}

func (e TransparentOverlayColor) String() string {
	return string(e)
}

func (e *TransparentOverlayColor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransparentOverlayColor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransparentOverlayColor", str)
	}
	return nil
}

func (e TransparentOverlayColor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UploadType string

const (
	UploadTypeNew         UploadType = "NEW"
	UploadTypeFoundByHash UploadType = "FOUND_BY_HASH"
)

var AllUploadType = []UploadType{
	UploadTypeNew,
	UploadTypeFoundByHash,
}

func (e UploadType) IsValid() bool {
	switch e {
	case UploadTypeNew, UploadTypeFoundByHash:
		return true
	}
	return false
}

func (e UploadType) String() string {
	return string(e)
}

func (e *UploadType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UploadType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UploadType", str)
	}
	return nil
}

func (e UploadType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
