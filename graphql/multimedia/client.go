// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package multimedia

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, interceptors ...clientv2.RequestInterceptor) *Client {
	return &Client{Client: clientv2.NewClient(cli, baseURL, interceptors...)}
}

type Query struct {
	MediaItems              MediaItemsListResult              "json:\"mediaItems\" graphql:\"mediaItems\""
	Tags                    TagsListResult                    "json:\"tags\" graphql:\"tags\""
	Companies               CompaniesListResult               "json:\"companies\" graphql:\"companies\""
	TagsWithMediaItemsCount TagWithMediaItemsCountsListResult "json:\"tagsWithMediaItemsCount\" graphql:\"tagsWithMediaItemsCount\""
	GettyImages             GettyImagesListResult             "json:\"gettyImages\" graphql:\"gettyImages\""
	GettyUserDownloadStat   GettyUserDownloadStatResult       "json:\"gettyUserDownloadStat\" graphql:\"gettyUserDownloadStat\""
	EncoderTasks            EncoderTasksListResult            "json:\"encoderTasks\" graphql:\"encoderTasks\""
	SearchInPhotostock      SearchInPhotostockResult          "json:\"searchInPhotostock\" graphql:\"searchInPhotostock\""
	Locations               LocationsListResult               "json:\"locations\" graphql:\"locations\""
	ArchiveMediaItems       ArchiveMediaItemsResult           "json:\"archiveMediaItems\" graphql:\"archiveMediaItems\""
	ArchiverTasks           ArchiverTasksListResult           "json:\"archiverTasks\" graphql:\"archiverTasks\""
}
type Mutation struct {
	UpdateMediaLinks       UpdateMediaLinksResult       "json:\"updateMediaLinks\" graphql:\"updateMediaLinks\""
	Upload                 UploadResult                 "json:\"upload\" graphql:\"upload\""
	EnsureTag              EnsureTagResult              "json:\"ensureTag\" graphql:\"ensureTag\""
	UpdateTag              UpdateTagResult              "json:\"updateTag\" graphql:\"updateTag\""
	DeleteTag              DeleteTagResult              "json:\"deleteTag\" graphql:\"deleteTag\""
	EnrichMediaItem        EnrichMediaItemResult        "json:\"enrichMediaItem\" graphql:\"enrichMediaItem\""
	DownloadGettyImage     DownloadGettyImageResult     "json:\"downloadGettyImage\" graphql:\"downloadGettyImage\""
	DownloadFromPhotostock DownloadFromPhotostockResult "json:\"downloadFromPhotostock\" graphql:\"downloadFromPhotostock\""
}
type CreateTag_Result_Tag struct {
	ID int "json:\"id\" graphql:\"id\""
}
type CreateTag_Result_ProblemInterface struct {
	Message string "json:\"message\" graphql:\"message\""
}
type CreateTag_Result struct {
	Typename         *string                           "json:\"__typename\" graphql:\"__typename\""
	Tag              CreateTag_Result_Tag              "graphql:\"... on Tag\""
	ProblemInterface CreateTag_Result_ProblemInterface "graphql:\"... on ProblemInterface\""
}
type UpdateTag_Result_Tag struct {
	ID int "json:\"id\" graphql:\"id\""
}
type UpdateTag_Result_ProblemInterface struct {
	Message string "json:\"message\" graphql:\"message\""
}
type UpdateTag_Result struct {
	Typename         *string                           "json:\"__typename\" graphql:\"__typename\""
	Tag              UpdateTag_Result_Tag              "graphql:\"... on Tag\""
	ProblemInterface UpdateTag_Result_ProblemInterface "graphql:\"... on ProblemInterface\""
}
type searchTags_Result_TagsPagination_Items struct {
	Name string "json:\"name\" graphql:\"name\""
	ID   int    "json:\"id\" graphql:\"id\""
}
type searchTags_Result_TagsPagination struct {
	Items []*searchTags_Result_TagsPagination_Items "json:\"items\" graphql:\"items\""
}
type searchTags_Result_ProblemInterface struct {
	Message string "json:\"message\" graphql:\"message\""
}
type searchTags_Result struct {
	Typename         *string                            "json:\"__typename\" graphql:\"__typename\""
	TagsPagination   searchTags_Result_TagsPagination   "graphql:\"... on TagsPagination\""
	ProblemInterface searchTags_Result_ProblemInterface "graphql:\"... on ProblemInterface\""
}
type CreateTag struct {
	Result CreateTag_Result "json:\"result\" graphql:\"result\""
}
type UpdateTag struct {
	Result UpdateTag_Result "json:\"result\" graphql:\"result\""
}
type SearchTags struct {
	Result searchTags_Result "json:\"result\" graphql:\"result\""
}

const CreateTagDocument = `mutation CreateTag ($input: EnsureTagModelInput!) {
	result: ensureTag(tag: $input) {
		__typename
		... on Tag {
			id
		}
		... on ProblemInterface {
			message
		}
	}
}
`

func (c *Client) CreateTag(ctx context.Context, input EnsureTagModelInput, interceptors ...clientv2.RequestInterceptor) (*CreateTag, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateTag
	if err := c.Client.Post(ctx, "CreateTag", CreateTagDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateTagDocument = `mutation UpdateTag ($input: UpdateTagInput!) {
	result: updateTag(tag: $input) {
		__typename
		... on Tag {
			id
		}
		... on ProblemInterface {
			message
		}
	}
}
`

func (c *Client) UpdateTag(ctx context.Context, input UpdateTagInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTag, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res UpdateTag
	if err := c.Client.Post(ctx, "UpdateTag", UpdateTagDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const SearchTagsDocument = `query searchTags ($input: TagsFilterInput, $sort: TagsSort!) {
	result: tags(filter: $input, limit: 10, skip: 0, sort: $sort) {
		__typename
		... on TagsPagination {
			items {
				name
				id
			}
		}
		... on ProblemInterface {
			message
		}
	}
}
`

func (c *Client) SearchTags(ctx context.Context, input *TagsFilterInput, sort TagsSort, interceptors ...clientv2.RequestInterceptor) (*SearchTags, error) {
	vars := map[string]interface{}{
		"input": input,
		"sort":  sort,
	}

	var res SearchTags
	if err := c.Client.Post(ctx, "searchTags", SearchTagsDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}
